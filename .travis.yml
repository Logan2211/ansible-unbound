language: python
cache:
  timeout: 3600
  pip: true
  directories:
    - $HOME/.docker
services:
  - docker
env:
  global:
    - ANSIBLE_FORCE_COLOR=1
    - docker_image=logan2211/docker-ci
    - docker_command=/lib/systemd/systemd
    - cache_dir=$HOME/.docker
  matrix:
    # LINTERS
    - TOXENV=linters
      CACHE_NAME=linters
    # ANSIBLE 2.1 (NEWTON)
    - >
      TOXENV=functional_2.1
      docker_image_tag=ubuntu-trusty
      docker_command=/sbin/init
      CACHE_NAME=trusty
    - >
      TOXENV=functional_2.1
      docker_image_tag=ubuntu-xenial
      CACHE_NAME=xenial
    # ANSIBLE 2.2 (OCATA)
    - >
      TOXENV=functional_2.2
      docker_image_tag=ubuntu-xenial
      CACHE_NAME=xenial
    - >
      TOXENV=functional_2.2
      docker_image_tag=centos-7
      CACHE_NAME=cent7
    # ANSIBLE stable (OSA MASTER)
    - >
      TOXENV=functional_stable
      docker_image_tag=ubuntu-xenial
      CACHE_NAME=xenial
    - >
      TOXENV=functional_stable
      docker_image_tag=centos-7
      CACHE_NAME=cent7
    - >
      TOXENV=functional_stable
      docker_image_tag=opensuse-42.2
      CACHE_NAME=suse42
      docker_command=/usr/lib/systemd/systemd
before_install:
  # Load cached docker images
  - if [[ -d ${cache_dir} ]]; then ls ${cache_dir}/*.tar.gz | xargs -I {file} sh -c "zcat {file} | docker load"; fi
  - if [[ -n ${docker_image_tag} ]]; then docker pull ${docker_image}:${docker_image_tag}; fi
install:
  - pip install tox
script:
  - tox
before_cache:
  # Save tagged docker images
  - >
    mkdir -p ${cache_dir} && docker images -a --filter='dangling=false' --format '{{.Repository}}:{{.Tag}} {{.ID}}'
    | xargs -n 2 -t sh -c 'test -e ${cache_dir}/$1.tar.gz || docker save $0 | gzip -2 > ${cache_dir}/$1.tar.gz'
notifications:
  email: false
  slack:
    rooms:
      secure: NZHaWM5nDxbToME+LzgxjNyMomEQQaex1rgjBo36125ZTB6hUZCh7/tUFtc5qtVBG6gOdX9xkqK77jPClD07MtwugBPqAGS6gNhdcalnmIBZnPE4vqRKlM3jrsFQlSd9AOJfTsNiG4NK/q/IJpMcSENovspewsPFQQVd2vHZ0gQtT9IUusbZpDhFpejsuTWOq8sYczWdq8QAmyFlDyknOzQYgWVvXYohFHXw5eFlvO9e0xIXU7vd5MhFwjIe8n1rUzAsiHZrXhW4Fve7I4wQ/yV1GzrCZT8fxu1/YrSRg2eJh6lT7rbFD47TDSh9jLg2a4Nh1wdxXYk50irTKU6l7zaY6PHXd4mAmnWeNkSa6w02BfOsZl8q07AlVCcaD1ttk35x+j+K1MtFXpge7z/S2xl9ygg36F0RoEuQnfIO88F8gnc7hpROCePWQTy9Fl4PFkbEPfyrGpSdQQ64Fpu6mXvs987JEqri0DFdrGXzivs/SIkEpFRVplyHVaDVP6Nv1gmPTX7OheXCCdKNlG9xIQLJGeL6E2Jb5l6xRmaylgi9BjMbRIWM1qz+O4NFDOVW63JqZ+pcDmrQmE9rSYIpUZ2dI4I87evX2OJgZxcMTbltRnDxLJsUGWCiGxfl9CC/KdgcuGY8a57v54b/PH8aRoQd0FPRE00FOron6Hj1TeA=
